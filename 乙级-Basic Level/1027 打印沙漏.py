'''
本题要求你写个程序把给定的符号打印成沙漏的形状。例如给定17个“*”，要求按下列格式打印
*****
 ***
  *
 ***
*****
所谓“沙漏形状”，是指每行输出奇数个符号；各行符号中心对齐；相邻两行符号数差2；
    符号数先从大到小顺序递减到1，再从小到大顺序递增；首尾符号数相等。
给定任意N个符号，不一定能正好组成一个沙漏。要求打印出的沙漏能用掉尽可能多的符号。

输入格式:
输入在一行给出1个正整数N（≤1000）和一个符号，中间以空格分隔。
输出格式:
首先打印出由给定符号组成的最大的沙漏形状，最后在一行中输出剩下没用掉的符号数。
输入样例:
19 *
输出样例:
*****
 ***
  *
 ***
*****
2
'''

if __name__ == '__main__':
    n, sign = input().split()
    n = int(n)
    if n == 0:
        print(n)
        exit(0)
    # 计算个数
    cost, m = -1, 1
    while True:
        t = cost + m * 2
        if t > n:
            m -= 2
            break
        cost = t
        if t == n:
            break
        m += 2
    # 打印
    numbers = [i for i in range(m, 0, -2)] + [i for i in range(1, m + 1, 2)][1:]
    # 符号前加空格，符号后不需要加空格，否则造成测试点0、3格式错误
    print('\n'.join(list(map(lambda x: ' ' * int((m - x) / 2) + sign * x, numbers))))
    print(n - cost)
